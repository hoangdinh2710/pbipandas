name: Auto Version & Tag

on:
  push:
    branches:
      - main  # Trigger on pushes to main

jobs:
  version:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required for tags and history
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bump-my-version

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(bump-my-version show current_version)
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Determine bump type from commit messages
        id: bump
        run: |
          # Get the last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Last tag: $LAST_TAG"
          
          # Get commits since last tag
          COMMITS=$(git log $LAST_TAG..HEAD --pretty=format:"%s" 2>/dev/null || git log --pretty=format:"%s")
          echo "Commits since last tag:"
          echo "$COMMITS"

          # Determine bump type based on conventional commits
          if echo "$COMMITS" | grep -q "BREAKING CHANGE\|!:"; then
            echo "BUMP=major" >> $GITHUB_ENV
            echo "bump_type=major" >> $GITHUB_OUTPUT
          elif echo "$COMMITS" | grep -qE "^feat"; then
            echo "BUMP=minor" >> $GITHUB_ENV
            echo "bump_type=minor" >> $GITHUB_OUTPUT
          elif echo "$COMMITS" | grep -qE "^fix|^docs|^style|^refactor|^perf|^test|^chore"; then
            echo "BUMP=patch" >> $GITHUB_ENV
            echo "bump_type=patch" >> $GITHUB_OUTPUT
          else
            echo "No conventional commits found, defaulting to patch"
            echo "BUMP=patch" >> $GITHUB_ENV
            echo "bump_type=patch" >> $GITHUB_OUTPUT
          fi

      - name: Bump version
        id: bump_version
        run: |
          BUMP=${BUMP:-patch}
          echo "Bumping version ($BUMP)"
          
          # Perform the version bump
          bump-my-version bump $BUMP --message "chore: bump version to {new_version}"
          
          # Get the new version
          NEW_VERSION=$(bump-my-version show current_version)
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Commit and push version bump
        run: |
          # Check if there are changes to commit
          if git diff --quiet; then
            echo "No changes detected, skipping commit."
          else
            # Commit the version bump
            git add .
            git commit -m "chore: bump version to ${{ steps.bump_version.outputs.new_version }}"
            
            # Push the commit
            git push origin main
          fi

      - name: Create and push tag
        run: |
          NEW_VERSION="${{ steps.bump_version.outputs.new_version }}"
          
          # Create the tag
          git tag "v$NEW_VERSION"
          
          # Push the tag
          git push origin "v$NEW_VERSION"
          
          echo "Created and pushed tag: v$NEW_VERSION"
